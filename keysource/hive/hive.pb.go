// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.23.4
// source: hive.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AccessKeyAction int32

const (
	AccessKeyAction_ACTION_ADD    AccessKeyAction = 0
	AccessKeyAction_ACTION_REMOVE AccessKeyAction = 1
)

// Enum value maps for AccessKeyAction.
var (
	AccessKeyAction_name = map[int32]string{
		0: "ACTION_ADD",
		1: "ACTION_REMOVE",
	}
	AccessKeyAction_value = map[string]int32{
		"ACTION_ADD":    0,
		"ACTION_REMOVE": 1,
	}
)

func (x AccessKeyAction) Enum() *AccessKeyAction {
	p := new(AccessKeyAction)
	*p = x
	return p
}

func (x AccessKeyAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessKeyAction) Descriptor() protoreflect.EnumDescriptor {
	return file_hive_proto_enumTypes[0].Descriptor()
}

func (AccessKeyAction) Type() protoreflect.EnumType {
	return &file_hive_proto_enumTypes[0]
}

func (x AccessKeyAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessKeyAction.Descriptor instead.
func (AccessKeyAction) EnumDescriptor() ([]byte, []int) {
	return file_hive_proto_rawDescGZIP(), []int{0}
}

type AccessKeyState int32

const (
	AccessKeyState_STATE_UNKNOWN   AccessKeyState = 0
	AccessKeyState_STATE_ACTIVE    AccessKeyState = 1
	AccessKeyState_STATE_PROBATION AccessKeyState = 2
	AccessKeyState_STATE_SUSPEND   AccessKeyState = 3
)

// Enum value maps for AccessKeyState.
var (
	AccessKeyState_name = map[int32]string{
		0: "STATE_UNKNOWN",
		1: "STATE_ACTIVE",
		2: "STATE_PROBATION",
		3: "STATE_SUSPEND",
	}
	AccessKeyState_value = map[string]int32{
		"STATE_UNKNOWN":   0,
		"STATE_ACTIVE":    1,
		"STATE_PROBATION": 2,
		"STATE_SUSPEND":   3,
	}
)

func (x AccessKeyState) Enum() *AccessKeyState {
	p := new(AccessKeyState)
	*p = x
	return p
}

func (x AccessKeyState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccessKeyState) Descriptor() protoreflect.EnumDescriptor {
	return file_hive_proto_enumTypes[1].Descriptor()
}

func (AccessKeyState) Type() protoreflect.EnumType {
	return &file_hive_proto_enumTypes[1]
}

func (x AccessKeyState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccessKeyState.Descriptor instead.
func (AccessKeyState) EnumDescriptor() ([]byte, []int) {
	return file_hive_proto_rawDescGZIP(), []int{1}
}

type AccessKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Secret        string         `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
	Cipher        string         `protobuf:"bytes,3,opt,name=cipher,proto3" json:"cipher,omitempty"`
	Port          uint32         `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	State         AccessKeyState `protobuf:"varint,5,opt,name=state,proto3,enum=hive.AccessKeyState" json:"state,omitempty"`
	OverusePolicy AccessKeyState `protobuf:"varint,6,opt,name=overuse_policy,json=overusePolicy,proto3,enum=hive.AccessKeyState" json:"overuse_policy,omitempty"`
}

func (x *AccessKey) Reset() {
	*x = AccessKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hive_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessKey) ProtoMessage() {}

func (x *AccessKey) ProtoReflect() protoreflect.Message {
	mi := &file_hive_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessKey.ProtoReflect.Descriptor instead.
func (*AccessKey) Descriptor() ([]byte, []int) {
	return file_hive_proto_rawDescGZIP(), []int{0}
}

func (x *AccessKey) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AccessKey) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *AccessKey) GetCipher() string {
	if x != nil {
		return x.Cipher
	}
	return ""
}

func (x *AccessKey) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *AccessKey) GetState() AccessKeyState {
	if x != nil {
		return x.State
	}
	return AccessKeyState_STATE_UNKNOWN
}

func (x *AccessKey) GetOverusePolicy() AccessKeyState {
	if x != nil {
		return x.OverusePolicy
	}
	return AccessKeyState_STATE_UNKNOWN
}

type AccessKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AccessKeysRequest) Reset() {
	*x = AccessKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hive_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessKeysRequest) ProtoMessage() {}

func (x *AccessKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hive_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessKeysRequest.ProtoReflect.Descriptor instead.
func (*AccessKeysRequest) Descriptor() ([]byte, []int) {
	return file_hive_proto_rawDescGZIP(), []int{1}
}

type AccessKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessKey *AccessKey      `protobuf:"bytes,1,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	Action    AccessKeyAction `protobuf:"varint,2,opt,name=action,proto3,enum=hive.AccessKeyAction" json:"action,omitempty"`
}

func (x *AccessKeysResponse) Reset() {
	*x = AccessKeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hive_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessKeysResponse) ProtoMessage() {}

func (x *AccessKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hive_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessKeysResponse.ProtoReflect.Descriptor instead.
func (*AccessKeysResponse) Descriptor() ([]byte, []int) {
	return file_hive_proto_rawDescGZIP(), []int{2}
}

func (x *AccessKeysResponse) GetAccessKey() *AccessKey {
	if x != nil {
		return x.AccessKey
	}
	return nil
}

func (x *AccessKeysResponse) GetAction() AccessKeyAction {
	if x != nil {
		return x.Action
	}
	return AccessKeyAction_ACTION_ADD
}

type ConnectionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event                uint32 `protobuf:"varint,1,opt,name=event,proto3" json:"event,omitempty"`
	KeyId                uint64 `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Src                  string `protobuf:"bytes,3,opt,name=src,proto3" json:"src,omitempty"`
	Dst                  string `protobuf:"bytes,4,opt,name=dst,proto3" json:"dst,omitempty"`
	DstPort              uint32 `protobuf:"varint,5,opt,name=dst_port,json=dstPort,proto3" json:"dst_port,omitempty"`
	DstHost              string `protobuf:"bytes,6,opt,name=dst_host,json=dstHost,proto3" json:"dst_host,omitempty"`
	Downstream           uint64 `protobuf:"varint,7,opt,name=downstream,proto3" json:"downstream,omitempty"`
	Upstream             uint64 `protobuf:"varint,8,opt,name=upstream,proto3" json:"upstream,omitempty"`
	Timestamp            uint64 `protobuf:"varint,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ConnectionCount      uint32 `protobuf:"varint,10,opt,name=connection_count,json=connectionCount,proto3" json:"connection_count,omitempty"`
	FastAuth             bool   `protobuf:"varint,11,opt,name=fast_auth,json=fastAuth,proto3" json:"fast_auth,omitempty"`
	CipherLookupTime     uint32 `protobuf:"varint,12,opt,name=cipher_lookup_time,json=cipherLookupTime,proto3" json:"cipher_lookup_time,omitempty"`
	CipherLookupAttempts uint32 `protobuf:"varint,13,opt,name=cipher_lookup_attempts,json=cipherLookupAttempts,proto3" json:"cipher_lookup_attempts,omitempty"`
}

func (x *ConnectionEvent) Reset() {
	*x = ConnectionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hive_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionEvent) ProtoMessage() {}

func (x *ConnectionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_hive_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionEvent.ProtoReflect.Descriptor instead.
func (*ConnectionEvent) Descriptor() ([]byte, []int) {
	return file_hive_proto_rawDescGZIP(), []int{3}
}

func (x *ConnectionEvent) GetEvent() uint32 {
	if x != nil {
		return x.Event
	}
	return 0
}

func (x *ConnectionEvent) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *ConnectionEvent) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (x *ConnectionEvent) GetDst() string {
	if x != nil {
		return x.Dst
	}
	return ""
}

func (x *ConnectionEvent) GetDstPort() uint32 {
	if x != nil {
		return x.DstPort
	}
	return 0
}

func (x *ConnectionEvent) GetDstHost() string {
	if x != nil {
		return x.DstHost
	}
	return ""
}

func (x *ConnectionEvent) GetDownstream() uint64 {
	if x != nil {
		return x.Downstream
	}
	return 0
}

func (x *ConnectionEvent) GetUpstream() uint64 {
	if x != nil {
		return x.Upstream
	}
	return 0
}

func (x *ConnectionEvent) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ConnectionEvent) GetConnectionCount() uint32 {
	if x != nil {
		return x.ConnectionCount
	}
	return 0
}

func (x *ConnectionEvent) GetFastAuth() bool {
	if x != nil {
		return x.FastAuth
	}
	return false
}

func (x *ConnectionEvent) GetCipherLookupTime() uint32 {
	if x != nil {
		return x.CipherLookupTime
	}
	return 0
}

func (x *ConnectionEvent) GetCipherLookupAttempts() uint32 {
	if x != nil {
		return x.CipherLookupAttempts
	}
	return 0
}

type HandleEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seq    uint64             `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	Events []*ConnectionEvent `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *HandleEventsRequest) Reset() {
	*x = HandleEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hive_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleEventsRequest) ProtoMessage() {}

func (x *HandleEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hive_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleEventsRequest.ProtoReflect.Descriptor instead.
func (*HandleEventsRequest) Descriptor() ([]byte, []int) {
	return file_hive_proto_rawDescGZIP(), []int{4}
}

func (x *HandleEventsRequest) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *HandleEventsRequest) GetEvents() []*ConnectionEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type HandleEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HandleEventsResponse) Reset() {
	*x = HandleEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hive_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleEventsResponse) ProtoMessage() {}

func (x *HandleEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hive_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleEventsResponse.ProtoReflect.Descriptor instead.
func (*HandleEventsResponse) Descriptor() ([]byte, []int) {
	return file_hive_proto_rawDescGZIP(), []int{5}
}

type HandleReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalConnections uint64 `protobuf:"varint,1,opt,name=total_connections,json=totalConnections,proto3" json:"total_connections,omitempty"`
	TotalUpstream    uint64 `protobuf:"varint,2,opt,name=total_upstream,json=totalUpstream,proto3" json:"total_upstream,omitempty"`
	TotalDownstream  uint64 `protobuf:"varint,3,opt,name=total_downstream,json=totalDownstream,proto3" json:"total_downstream,omitempty"`
	EventsBuffered   uint32 `protobuf:"varint,4,opt,name=events_buffered,json=eventsBuffered,proto3" json:"events_buffered,omitempty"`
	EventsDropped    uint64 `protobuf:"varint,5,opt,name=events_dropped,json=eventsDropped,proto3" json:"events_dropped,omitempty"`
	KeyCount         uint32 `protobuf:"varint,6,opt,name=key_count,json=keyCount,proto3" json:"key_count,omitempty"`
	KeysAdded        uint32 `protobuf:"varint,7,opt,name=keys_added,json=keysAdded,proto3" json:"keys_added,omitempty"`
	KeysRemoved      uint32 `protobuf:"varint,8,opt,name=keys_removed,json=keysRemoved,proto3" json:"keys_removed,omitempty"`
	EventReqAttempts uint32 `protobuf:"varint,9,opt,name=event_req_attempts,json=eventReqAttempts,proto3" json:"event_req_attempts,omitempty"`
	EventReqSuccess  uint32 `protobuf:"varint,10,opt,name=event_req_success,json=eventReqSuccess,proto3" json:"event_req_success,omitempty"`
	EventReqFail     uint32 `protobuf:"varint,11,opt,name=event_req_fail,json=eventReqFail,proto3" json:"event_req_fail,omitempty"`
}

func (x *HandleReportRequest) Reset() {
	*x = HandleReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hive_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleReportRequest) ProtoMessage() {}

func (x *HandleReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hive_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleReportRequest.ProtoReflect.Descriptor instead.
func (*HandleReportRequest) Descriptor() ([]byte, []int) {
	return file_hive_proto_rawDescGZIP(), []int{6}
}

func (x *HandleReportRequest) GetTotalConnections() uint64 {
	if x != nil {
		return x.TotalConnections
	}
	return 0
}

func (x *HandleReportRequest) GetTotalUpstream() uint64 {
	if x != nil {
		return x.TotalUpstream
	}
	return 0
}

func (x *HandleReportRequest) GetTotalDownstream() uint64 {
	if x != nil {
		return x.TotalDownstream
	}
	return 0
}

func (x *HandleReportRequest) GetEventsBuffered() uint32 {
	if x != nil {
		return x.EventsBuffered
	}
	return 0
}

func (x *HandleReportRequest) GetEventsDropped() uint64 {
	if x != nil {
		return x.EventsDropped
	}
	return 0
}

func (x *HandleReportRequest) GetKeyCount() uint32 {
	if x != nil {
		return x.KeyCount
	}
	return 0
}

func (x *HandleReportRequest) GetKeysAdded() uint32 {
	if x != nil {
		return x.KeysAdded
	}
	return 0
}

func (x *HandleReportRequest) GetKeysRemoved() uint32 {
	if x != nil {
		return x.KeysRemoved
	}
	return 0
}

func (x *HandleReportRequest) GetEventReqAttempts() uint32 {
	if x != nil {
		return x.EventReqAttempts
	}
	return 0
}

func (x *HandleReportRequest) GetEventReqSuccess() uint32 {
	if x != nil {
		return x.EventReqSuccess
	}
	return 0
}

func (x *HandleReportRequest) GetEventReqFail() uint32 {
	if x != nil {
		return x.EventReqFail
	}
	return 0
}

type HandleReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HandleReportResponse) Reset() {
	*x = HandleReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hive_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleReportResponse) ProtoMessage() {}

func (x *HandleReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hive_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleReportResponse.ProtoReflect.Descriptor instead.
func (*HandleReportResponse) Descriptor() ([]byte, []int) {
	return file_hive_proto_rawDescGZIP(), []int{7}
}

var File_hive_proto protoreflect.FileDescriptor

var file_hive_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x68, 0x69,
	0x76, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x69, 0x70, 0x68,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x3b, 0x0a, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x68, 0x69, 0x76, 0x65, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d,
	0x6f, 0x76, 0x65, 0x72, 0x75, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x13, 0x0a,
	0x11, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x73, 0x0a, 0x12, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68,
	0x69, 0x76, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x68, 0x69, 0x76, 0x65, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9e, 0x03, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x64, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x73, 0x74, 0x48, 0x6f,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x29, 0x0a, 0x10,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x73, 0x74, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x61, 0x73, 0x74,
	0x41, 0x75, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x5f, 0x6c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x22, 0x56, 0x0a, 0x13, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x73, 0x65,
	0x71, 0x12, 0x2d, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0x16, 0x0a, 0x14, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc3, 0x03, 0x0a, 0x13, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2b, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x70, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x6f,
	0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x27, 0x0a, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x6b, 0x65, 0x79, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x6b, 0x65, 0x79, 0x73, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6b,
	0x65, 0x79, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x6b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x61, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x46, 0x61, 0x69, 0x6c, 0x22, 0x16,
	0x0a, 0x14, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x34, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4b, 0x65, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x01, 0x2a, 0x5d, 0x0a, 0x0e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x11,
	0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x42, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x10, 0x03, 0x32, 0xdd, 0x01, 0x0a, 0x04,
	0x48, 0x69, 0x76, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65,
	0x79, 0x73, 0x12, 0x17, 0x2e, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x68, 0x69,
	0x76, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x47, 0x0a, 0x0c, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x19, 0x2e, 0x68, 0x69, 0x76, 0x65,
	0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x47, 0x0a, 0x0c, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x19, 0x2e, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x68, 0x69, 0x76, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x1f, 0x5a, 0x1d, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4a, 0x69, 0x6e, 0x61, 0x56, 0x50,
	0x4e, 0x2f, 0x68, 0x69, 0x76, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hive_proto_rawDescOnce sync.Once
	file_hive_proto_rawDescData = file_hive_proto_rawDesc
)

func file_hive_proto_rawDescGZIP() []byte {
	file_hive_proto_rawDescOnce.Do(func() {
		file_hive_proto_rawDescData = protoimpl.X.CompressGZIP(file_hive_proto_rawDescData)
	})
	return file_hive_proto_rawDescData
}

var file_hive_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_hive_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_hive_proto_goTypes = []interface{}{
	(AccessKeyAction)(0),         // 0: hive.AccessKeyAction
	(AccessKeyState)(0),          // 1: hive.AccessKeyState
	(*AccessKey)(nil),            // 2: hive.AccessKey
	(*AccessKeysRequest)(nil),    // 3: hive.AccessKeysRequest
	(*AccessKeysResponse)(nil),   // 4: hive.AccessKeysResponse
	(*ConnectionEvent)(nil),      // 5: hive.ConnectionEvent
	(*HandleEventsRequest)(nil),  // 6: hive.HandleEventsRequest
	(*HandleEventsResponse)(nil), // 7: hive.HandleEventsResponse
	(*HandleReportRequest)(nil),  // 8: hive.HandleReportRequest
	(*HandleReportResponse)(nil), // 9: hive.HandleReportResponse
}
var file_hive_proto_depIdxs = []int32{
	1, // 0: hive.AccessKey.state:type_name -> hive.AccessKeyState
	1, // 1: hive.AccessKey.overuse_policy:type_name -> hive.AccessKeyState
	2, // 2: hive.AccessKeysResponse.access_key:type_name -> hive.AccessKey
	0, // 3: hive.AccessKeysResponse.action:type_name -> hive.AccessKeyAction
	5, // 4: hive.HandleEventsRequest.events:type_name -> hive.ConnectionEvent
	3, // 5: hive.Hive.AccessKeys:input_type -> hive.AccessKeysRequest
	6, // 6: hive.Hive.HandleEvents:input_type -> hive.HandleEventsRequest
	8, // 7: hive.Hive.HandleReport:input_type -> hive.HandleReportRequest
	4, // 8: hive.Hive.AccessKeys:output_type -> hive.AccessKeysResponse
	7, // 9: hive.Hive.HandleEvents:output_type -> hive.HandleEventsResponse
	9, // 10: hive.Hive.HandleReport:output_type -> hive.HandleReportResponse
	8, // [8:11] is the sub-list for method output_type
	5, // [5:8] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_hive_proto_init() }
func file_hive_proto_init() {
	if File_hive_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hive_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hive_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hive_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessKeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hive_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hive_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hive_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hive_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hive_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hive_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_hive_proto_goTypes,
		DependencyIndexes: file_hive_proto_depIdxs,
		EnumInfos:         file_hive_proto_enumTypes,
		MessageInfos:      file_hive_proto_msgTypes,
	}.Build()
	File_hive_proto = out.File
	file_hive_proto_rawDesc = nil
	file_hive_proto_goTypes = nil
	file_hive_proto_depIdxs = nil
}
