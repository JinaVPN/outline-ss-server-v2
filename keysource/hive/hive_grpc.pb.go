// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: hive.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HiveClient is the client API for Hive service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HiveClient interface {
	AccessKeys(ctx context.Context, in *AccessKeysRequest, opts ...grpc.CallOption) (Hive_AccessKeysClient, error)
	HandleEvents(ctx context.Context, in *HandleEventsRequest, opts ...grpc.CallOption) (*HandleEventsResponse, error)
	HandleReport(ctx context.Context, in *HandleReportRequest, opts ...grpc.CallOption) (*HandleReportResponse, error)
}

type hiveClient struct {
	cc grpc.ClientConnInterface
}

func NewHiveClient(cc grpc.ClientConnInterface) HiveClient {
	return &hiveClient{cc}
}

func (c *hiveClient) AccessKeys(ctx context.Context, in *AccessKeysRequest, opts ...grpc.CallOption) (Hive_AccessKeysClient, error) {
	stream, err := c.cc.NewStream(ctx, &Hive_ServiceDesc.Streams[0], "/hive.Hive/AccessKeys", opts...)
	if err != nil {
		return nil, err
	}
	x := &hiveAccessKeysClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Hive_AccessKeysClient interface {
	Recv() (*AccessKeysResponse, error)
	grpc.ClientStream
}

type hiveAccessKeysClient struct {
	grpc.ClientStream
}

func (x *hiveAccessKeysClient) Recv() (*AccessKeysResponse, error) {
	m := new(AccessKeysResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hiveClient) HandleEvents(ctx context.Context, in *HandleEventsRequest, opts ...grpc.CallOption) (*HandleEventsResponse, error) {
	out := new(HandleEventsResponse)
	err := c.cc.Invoke(ctx, "/hive.Hive/HandleEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hiveClient) HandleReport(ctx context.Context, in *HandleReportRequest, opts ...grpc.CallOption) (*HandleReportResponse, error) {
	out := new(HandleReportResponse)
	err := c.cc.Invoke(ctx, "/hive.Hive/HandleReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HiveServer is the server API for Hive service.
// All implementations must embed UnimplementedHiveServer
// for forward compatibility
type HiveServer interface {
	AccessKeys(*AccessKeysRequest, Hive_AccessKeysServer) error
	HandleEvents(context.Context, *HandleEventsRequest) (*HandleEventsResponse, error)
	HandleReport(context.Context, *HandleReportRequest) (*HandleReportResponse, error)
	mustEmbedUnimplementedHiveServer()
}

// UnimplementedHiveServer must be embedded to have forward compatible implementations.
type UnimplementedHiveServer struct {
}

func (UnimplementedHiveServer) AccessKeys(*AccessKeysRequest, Hive_AccessKeysServer) error {
	return status.Errorf(codes.Unimplemented, "method AccessKeys not implemented")
}
func (UnimplementedHiveServer) HandleEvents(context.Context, *HandleEventsRequest) (*HandleEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleEvents not implemented")
}
func (UnimplementedHiveServer) HandleReport(context.Context, *HandleReportRequest) (*HandleReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleReport not implemented")
}
func (UnimplementedHiveServer) mustEmbedUnimplementedHiveServer() {}

// UnsafeHiveServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HiveServer will
// result in compilation errors.
type UnsafeHiveServer interface {
	mustEmbedUnimplementedHiveServer()
}

func RegisterHiveServer(s grpc.ServiceRegistrar, srv HiveServer) {
	s.RegisterService(&Hive_ServiceDesc, srv)
}

func _Hive_AccessKeys_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AccessKeysRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HiveServer).AccessKeys(m, &hiveAccessKeysServer{stream})
}

type Hive_AccessKeysServer interface {
	Send(*AccessKeysResponse) error
	grpc.ServerStream
}

type hiveAccessKeysServer struct {
	grpc.ServerStream
}

func (x *hiveAccessKeysServer) Send(m *AccessKeysResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Hive_HandleEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiveServer).HandleEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hive.Hive/HandleEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiveServer).HandleEvents(ctx, req.(*HandleEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hive_HandleReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiveServer).HandleReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hive.Hive/HandleReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiveServer).HandleReport(ctx, req.(*HandleReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Hive_ServiceDesc is the grpc.ServiceDesc for Hive service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hive_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hive.Hive",
	HandlerType: (*HiveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleEvents",
			Handler:    _Hive_HandleEvents_Handler,
		},
		{
			MethodName: "HandleReport",
			Handler:    _Hive_HandleReport_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AccessKeys",
			Handler:       _Hive_AccessKeys_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "hive.proto",
}
